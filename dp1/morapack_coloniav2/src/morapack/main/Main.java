package morapack.main;

import morapack.colonia.algoritmo.AlgoritmoColoniaHormigas;
import morapack.core.problema.ProblemaMoraPack;
import morapack.core.solucion.SolucionMoraPack;
import morapack.datos.modelos.RedDistribucion;
import morapack.datos.modelos.Pedido;

import java.time.LocalDateTime;
import java.util.List;
import java.util.ArrayList;

/**
 * Clase principal para el sistema MoraPack - Algoritmo de Colonia de Hormigas
 * para optimizaci√≥n de rutas de distribuci√≥n log√≠stica.
 *
 * Resuelve los pedidos del archivo pedidos_01.csv (enero 2025) usando ACO optimizado.
 */
public class Main {

    public static void main(String[] args) {
        System.out.println("=== MoraPack Colonia v2 - Sistema de Optimizaci√≥n Log√≠stica ===");
        System.out.println("Algoritmo de Colonia de Hormigas para planificaci√≥n de rutas");
        System.out.println("Resolviendo pedidos de enero 2025 (pedidos_01.csv)\n");

        try {
            // 1. CARGAR Y CONFIGURAR EL SISTEMA
            System.out.println("üìä CARGANDO DATOS DEL SISTEMA...");
            RedDistribucion red = new RedDistribucion();

            // Usar archivo de pedidos filtrados (solo destinos v√°lidos de la red MoraPack)
            String rutaAeropuertos = "datos/aeropuertos.csv";
            String rutaVuelos = "datos/planes_de_vuelo.csv";
            String rutaPedidos = "datos/pedidos/pedidos_01_filtrados.csv";

            red.inicializar(rutaAeropuertos, rutaVuelos, rutaPedidos, 1, 2025);

            // Configurar tiempo de referencia para simulaci√≥n
            LocalDateTime tiempoReferencia = LocalDateTime.of(2025, 1, 1, 0, 0);
            red.setTiempoReferencia(tiempoReferencia);

            System.out.println("   ‚úÖ Aeropuertos cargados: " + red.getAeropuertos().size());
            System.out.println("   ‚úÖ Vuelos cargados: " + red.getVuelos().size());
            System.out.println("   ‚úÖ Pedidos de enero: " + red.getPedidos().size());
            System.out.println("   üïê Tiempo de referencia: " + tiempoReferencia);
            System.out.println();

            // 2. CONVERTIR A LISTA Y MOSTRAR INFORMACI√ìN DE PEDIDOS
            List<Pedido> listaPedidos = new ArrayList<>(red.getPedidos().values());
            mostrarResumenPedidos(listaPedidos);

            // 3. CREAR Y CONFIGURAR EL PROBLEMA
            System.out.println("üéØ CONFIGURANDO PROBLEMA MORAPACK...");
            ProblemaMoraPack problema = new ProblemaMoraPack(red, listaPedidos, tiempoReferencia);
            System.out.println("   ‚úÖ Problema configurado con " + listaPedidos.size() + " pedidos");
            System.out.println();

            // 4. CONFIGURAR Y EJECUTAR ALGORITMO ACO
            System.out.println("üêú EJECUTANDO ALGORITMO DE COLONIA DE HORMIGAS...");

            // Par√°metros optimizados para log√≠stica
            int numeroHormigas = 15;        // Mayor diversidad
            int maxIteraciones = 150;       // M√°s paciencia para problemas complejos
            double tasaEvaporacion = 0.15;  // Evitar estancamiento

            AlgoritmoColoniaHormigas algoritmo = new AlgoritmoColoniaHormigas(
                problema, numeroHormigas, maxIteraciones, tasaEvaporacion
            );

            System.out.println("   üîß Hormigas: " + numeroHormigas +
                             ", Iteraciones: " + maxIteraciones +
                             ", Evaporaci√≥n: " + tasaEvaporacion);

            long tiempoInicio = System.currentTimeMillis();
            SolucionMoraPack mejorSolucion = (SolucionMoraPack) algoritmo.ejecutar();
            long tiempoEjecucion = System.currentTimeMillis() - tiempoInicio;

            System.out.println("   ‚è±Ô∏è  Tiempo de ejecuci√≥n: " + tiempoEjecucion + " ms");
            System.out.println();

            // 5. MOSTRAR RESULTADOS DETALLADOS
            mostrarResultadosDetallados(mejorSolucion, listaPedidos);

            // 6. MOSTRAR ESTAD√çSTICAS DEL ALGORITMO
            mostrarEstadisticasAlgoritmo(algoritmo);

        } catch (Exception e) {
            System.err.println("‚ùå ERROR EN LA EJECUCI√ìN:");
            System.err.println("   " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Muestra un resumen de los pedidos cargados
     */
    private static void mostrarResumenPedidos(List<Pedido> pedidos) {
        System.out.println("üì¶ RESUMEN DE PEDIDOS:");

        int totalProductos = pedidos.stream()
            .mapToInt(Pedido::getCantidadProductos)
            .sum();

        // Contar destinos √∫nicos
        long destinosUnicos = pedidos.stream()
            .map(Pedido::getCodigoDestino)
            .distinct()
            .count();

        // Pedido m√°s grande y m√°s peque√±o
        Pedido pedidoMayor = pedidos.stream()
            .max((p1, p2) -> Integer.compare(p1.getCantidadProductos(), p2.getCantidadProductos()))
            .orElse(null);

        Pedido pedidoMenor = pedidos.stream()
            .min((p1, p2) -> Integer.compare(p1.getCantidadProductos(), p2.getCantidadProductos()))
            .orElse(null);

        System.out.println("   üìä Total pedidos: " + pedidos.size());
        System.out.println("   üìà Total productos: " + totalProductos);
        System.out.println("   üåç Destinos √∫nicos: " + destinosUnicos);
        System.out.println("   ‚¨ÜÔ∏è  Pedido mayor: " + (pedidoMayor != null ?
            pedidoMayor.getCodigoDestino() + " (" + pedidoMayor.getCantidadProductos() + " productos)" : "N/A"));
        System.out.println("   ‚¨áÔ∏è  Pedido menor: " + (pedidoMenor != null ?
            pedidoMenor.getCodigoDestino() + " (" + pedidoMenor.getCantidadProductos() + " productos)" : "N/A"));
        System.out.println();
    }

    /**
     * Muestra los resultados detallados de la soluci√≥n
     */
    private static void mostrarResultadosDetallados(SolucionMoraPack solucion, List<Pedido> pedidos) {
        System.out.println("üéâ RESULTADOS DE LA OPTIMIZACI√ìN:");
        System.out.println("   üèÜ Fitness de la soluci√≥n: " + String.format("%.2f", solucion.getFitness()));
        System.out.println("   ‚è∞ Cumple plazos: " + (solucion.cumplePlazos() ? "‚úÖ S√ç" : "‚ùå NO"));
        System.out.println("   üìã " + solucion.getEstadisticas());
        System.out.println("   üì¶ " + solucion.getEstadisticasEntregasParciales());
        System.out.println();

        // Mostrar algunos ejemplos de rutas generadas
        System.out.println("üõ£Ô∏è  EJEMPLOS DE RUTAS GENERADAS:");
        int ejemplosMostrados = 0;
        for (Pedido pedido : pedidos) {
            List<SolucionMoraPack.RutaProducto> rutas = solucion.getRutasProducto(pedido.getIdPedido().hashCode());
            if (!rutas.isEmpty() && ejemplosMostrados < 5) {
                System.out.println("   üìç Pedido " + pedido.getIdPedido() + " ‚Üí " + pedido.getCodigoDestino() +
                                 " (" + pedido.getCantidadProductos() + " productos):");

                for (SolucionMoraPack.RutaProducto ruta : rutas) {
                    System.out.println("      üöö Entrega #" + ruta.getNumeroEntrega() + ": " +
                                     ruta.getCantidadTransportada() + " productos via " + ruta);
                }
                ejemplosMostrados++;
                System.out.println();
            }
        }

        if (ejemplosMostrados == 0) {
            System.out.println("   ‚ö†Ô∏è  No se generaron rutas v√°lidas");
        }
    }

    /**
     * Muestra las estad√≠sticas del algoritmo ACO
     */
    private static void mostrarEstadisticasAlgoritmo(AlgoritmoColoniaHormigas algoritmo) {
        System.out.println("üìà ESTAD√çSTICAS DEL ALGORITMO:");
        System.out.println("   üîß Algoritmo completado exitosamente");
        System.out.println("   üêú Colonia de hormigas trabaj√≥ de forma colaborativa");
        System.out.println("   üéØ Optimizaci√≥n basada en feromonas y heur√≠sticas log√≠sticas");
        System.out.println();

        System.out.println("‚úÖ EJECUCI√ìN COMPLETADA");
        System.out.println("   El sistema ha procesado todos los pedidos de enero 2025");
        System.out.println("   usando el algoritmo ACO optimizado para log√≠stica.");
    }
}