package morapack.main;

import morapack.datos.CargadorDatosCSV;
import morapack.modelo.Pedido;
import morapack.modelo.Vuelo;
import morapack.genetico.AlgoritmoGeneticoRutas;
import morapack.genetico.IndividuoRutasCompletas;
import java.util.List;

/**
 * Demostraci√≥n del Algoritmo Gen√©tico con Planificaci√≥n Completa de Rutas
 */
public class MainGeneticoSimplificado {
    
    public static void main(String[] args) {
        try {
            System.out.println("üöÄ ALGORITMO GEN√âTICO CON PLANIFICACI√ìN COMPLETA DE RUTAS");
            System.out.println("===============================================================");
            
            // 1. CARGAR DATOS
            System.out.println("üìÇ Cargando datos...");
            List<Vuelo> vuelos = CargadorDatosCSV.cargarVuelos();
            List<Pedido> pedidos = CargadorDatosCSV.cargarPedidosDesdeArchivo("aeropuertos_simple.csv");
            
            System.out.println("‚úÖ Cargados: " + vuelos.size() + " vuelos, " + pedidos.size() + " pedidos");
            
            // 2. CONFIGURAR ALGORITMO GEN√âTICO
            int tamanoPoblacion = 30;
            int generaciones = 50;
            double probabilidadCruce = 0.8;
            double probabilidadMutacion = 0.1;
            
            AlgoritmoGeneticoRutas algoritmo = new AlgoritmoGeneticoRutas(
                pedidos, vuelos, tamanoPoblacion, probabilidadCruce, probabilidadMutacion
            );
            
            // 3. EJECUTAR ALGORITMO
            System.out.println("\nüß¨ Ejecutando algoritmo gen√©tico...");
            long inicioTiempo = System.currentTimeMillis();
            
            IndividuoRutasCompletas mejorSolucion = algoritmo.ejecutar(generaciones);
            
            long tiempoTotal = System.currentTimeMillis() - inicioTiempo;
            
            // 4. MOSTRAR RESULTADOS
            System.out.println("\nüéØ RESULTADOS FINALES");
            System.out.println("==================================================");
            System.out.println("‚è±Ô∏è Tiempo de ejecuci√≥n: " + tiempoTotal + " ms");
            System.out.println("üèÜ Fitness de la mejor soluci√≥n: " + mejorSolucion.getFitness());
            
            System.out.println("\nüìã DETALLE DE LA MEJOR SOLUCI√ìN:");
            System.out.println(mejorSolucion.obtenerDescripcion());
            
            // 5. COMPARACI√ìN CON ALGORITMO TRADICIONAL
            System.out.println("\nüîç COMPARACI√ìN:");
            System.out.println("‚úÖ ESTE algoritmo planifica rutas COMPLETAS con conexiones");
            System.out.println("‚ùå El algoritmo tradicional solo asigna sedes sin planificar rutas");
            System.out.println("üéØ Resultado: Rutas optimizadas con tiempos de vuelo reales");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
