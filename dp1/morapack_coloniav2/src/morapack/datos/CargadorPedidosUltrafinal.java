package morapack.datos;

import morapack.modelo.Pedido;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;

/**
 * Cargador de pedidos reales desde pedidoUltrafinal.txt con filtrado por destinos v√°lidos
 * Formato: dd-hh-mm-DEST-###-IdClien
 */
public class CargadorPedidosUltrafinal {
    
    /**
     * Carga pedidos desde pedidoUltrafinal.txt filtrando por destinos v√°lidos
     */
    public static List<Pedido> cargarPedidos(String rutaArchivo, Set<String> destinosValidos) throws IOException {
        List<Pedido> pedidos = new ArrayList<>();
        List<String> pedidosDescartados = new ArrayList<>();
        
        System.out.println("üìã Cargando pedidos desde: " + rutaArchivo);
        
        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            int contador = 0;
            int descartados = 0;
            
            while ((linea = br.readLine()) != null) {
                linea = linea.trim();
                if (linea.isEmpty()) continue;
                
                try {
                    // Extraer destino del ID para filtrar
                    String destino = extraerDestino(linea);
                    
                    if (destinosValidos.contains(destino)) {
                        Pedido pedido = new Pedido(linea);
                        pedidos.add(pedido);
                        contador++;
                        
                        // Progreso cada 50 pedidos v√°lidos
                        if (contador % 50 == 0) {
                            System.out.println("   ‚úÖ Cargados " + contador + " pedidos v√°lidos...");
                        }
                    } else {
                        pedidosDescartados.add(linea + " (destino: " + destino + ")");
                        descartados++;
                    }
                    
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è Error procesando pedido: " + linea + " - " + e.getMessage());
                    descartados++;
                }
            }
            
            System.out.println("‚úÖ Total pedidos cargados: " + contador);
            if (descartados > 0) {
                System.out.println("‚ö†Ô∏è Total pedidos descartados: " + descartados);
                System.out.println("   (Destinos no v√°lidos seg√∫n aeropuertos_simple.csv)");
            }
        }
        
        return pedidos;
    }
    
    /**
     * Carga todos los pedidos sin filtrar (para compatibilidad)
     */
    public static List<Pedido> cargarPedidos(String rutaArchivo) throws IOException {
        List<Pedido> pedidos = new ArrayList<>();
        
        System.out.println("üìã Cargando TODOS los pedidos desde: " + rutaArchivo);
        
        try (BufferedReader br = new BufferedReader(new FileReader(rutaArchivo))) {
            String linea;
            int contador = 0;
            
            while ((linea = br.readLine()) != null) {
                linea = linea.trim();
                if (linea.isEmpty()) continue;
                
                try {
                    Pedido pedido = new Pedido(linea);
                    pedidos.add(pedido);
                    contador++;
                    
                    if (contador % 50 == 0) {
                        System.out.println("   ‚úÖ Cargados " + contador + " pedidos...");
                    }
                    
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è Error procesando pedido: " + linea + " - " + e.getMessage());
                }
            }
            
            System.out.println("‚úÖ Total pedidos cargados: " + contador);
        }
        
        return pedidos;
    }
    
    /**
     * Extrae el c√≥digo de destino del ID del pedido
     * Formato: dd-hh-mm-DEST-###-IdClien
     */
    private static String extraerDestino(String idPedido) {
        String[] partes = idPedido.split("-");
        if (partes.length >= 4) {
            return partes[3]; // El destino est√° en la 4ta posici√≥n (√≠ndice 3)
        }
        throw new IllegalArgumentException("Formato de ID inv√°lido: " + idPedido);
    }
    
    /**
     * Muestra estad√≠sticas detalladas de los pedidos cargados
     */
    public static void mostrarEstadisticas(List<Pedido> pedidos) {
        if (pedidos.isEmpty()) {
            System.out.println("‚ùå No hay pedidos para mostrar estad√≠sticas");
            return;
        }
        
        System.out.println("\nüìä ============= ESTAD√çSTICAS DE PEDIDOS =============");
        
        Set<String> destinosUnicos = new java.util.HashSet<>();
        int totalProductos = 0;
        int minDia = Integer.MAX_VALUE;
        int maxDia = Integer.MIN_VALUE;
        
        for (Pedido pedido : pedidos) {
            destinosUnicos.add(pedido.getAeropuertoDestinoId());
            totalProductos += pedido.getCantidadProductos();
            
            int dia = pedido.getDia();
            if (dia < minDia) minDia = dia;
            if (dia > maxDia) maxDia = dia;
        }
        
        System.out.println("üì¶ Total pedidos: " + pedidos.size());
        System.out.println("üõ´ Destinos √∫nicos: " + destinosUnicos.size());
        System.out.println("üì¶ Total productos: " + totalProductos);
        System.out.println("üìä Promedio productos/pedido: " + (totalProductos / (double) pedidos.size()));
        System.out.println("üìÖ Rango de d√≠as: " + minDia + " - " + maxDia);
        
        // Top destinos m√°s frecuentes
        java.util.Map<String, Integer> frecuenciaDestinos = new java.util.HashMap<>();
        for (Pedido pedido : pedidos) {
            String destino = pedido.getAeropuertoDestinoId();
            frecuenciaDestinos.put(destino, frecuenciaDestinos.getOrDefault(destino, 0) + 1);
        }
        
        System.out.println("\nüéØ TOP 10 DESTINOS M√ÅS FRECUENTES:");
        frecuenciaDestinos.entrySet().stream()
            .sorted((e1, e2) -> e2.getValue().compareTo(e1.getValue()))
            .limit(10)
            .forEach(entry -> System.out.println("   " + entry.getKey() + ": " + entry.getValue() + " pedidos"));
        
        System.out.println("===================================================");
    }
}
