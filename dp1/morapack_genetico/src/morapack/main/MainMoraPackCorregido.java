package morapack.main;

import morapack.modelo.*;
import morapack.planificacion.*;
import morapack.datos.*;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

/**
 * Programa principal CORREGIDO para MoraPack 
 * Usa vuelos_completos.csv y filtra pedidos v√°lidos seg√∫n aeropuertos_simple.csv
 */
public class MainMoraPackCorregido {
    
    public static void main(String[] args) {
        
        System.out.println("üåç ============ MORAPACK SISTEMA CORREGIDO ============");
        System.out.println("‚úÖ Vuelos reales desde vuelos_completos.csv");
        System.out.println("‚úÖ Pedidos filtrados por aeropuertos_simple.csv");
        System.out.println("‚úÖ Gesti√≥n UTC y plazos continentales");
        System.out.println("======================================================");
        
        try {
            // üìã Definir aeropuertos v√°lidos (seg√∫n aeropuertos_simple.csv)
            Set<String> aeropuertosValidos = crearAeropuertosValidos();
            System.out.println("\nüìã Aeropuertos v√°lidos configurados: " + aeropuertosValidos.size());
            
            // ‚úàÔ∏è Cargar vuelos reales
            System.out.println("\n‚úàÔ∏è Cargando vuelos reales...");
            List<Vuelo> vuelos = CargadorVuelosCompletos.cargarVuelos("datos/vuelos_completos.csv");
            
            // Validar que los vuelos usen aeropuertos v√°lidos
            CargadorVuelosCompletos.validarAeropuertos(vuelos, aeropuertosValidos);
            CargadorVuelosCompletos.mostrarEstadisticas(vuelos);
            
            // üì¶ Cargar pedidos filtrados
            System.out.println("\nüì¶ Cargando pedidos filtrados...");
            List<Pedido> pedidos = CargadorPedidosUltrafinal.cargarPedidos("datos/pedidoUltrafinal.txt", aeropuertosValidos);
            
            // Mostrar estad√≠sticas de pedidos
            CargadorPedidosUltrafinal.mostrarEstadisticas(pedidos);
            
            // üïê Inicializar planificador temporal con UTC y plazos
            System.out.println("\nüïê Inicializando Planificador Temporal Mejorado...");
            PlanificadorTemporalConUTCyPlazos planificador = new PlanificadorTemporalConUTCyPlazos(vuelos);
            
            // Mostrar aeropuertos configurados para UTC
            System.out.println("\nüåç Aeropuertos configurados para UTC:");
            GestorUTCyContinentesCSV.mostrarTodosLosAeropuertos();
            
            // üìä Estad√≠sticas de procesamiento
            int procesados = 0;
            int exitosos = 0;
            int directos = 0;
            int conEscalas = 0;
            int fallidosPorPlazo = 0;
            int fallidosSinRuta = 0;
            
            String[] sedes = {"SPIM", "EBCI", "UBBB"}; // Lima, Bruselas, Bak√∫
            
            System.out.println("\nüì¶ ============= PROCESANDO PEDIDOS FILTRADOS =============");
            
            // Procesar pedidos v√°lidos
            for (Pedido pedido : pedidos) {
                procesados++;
                
                boolean encontroRuta = false;
                
                // Mostrar progreso cada 20 pedidos
                if (procesados % 20 == 0) {
                    System.out.printf("\n   üîÑ Progreso: %d/%d pedidos procesados (%.1f%%)\n", 
                                    procesados, pedidos.size(), (procesados * 100.0 / pedidos.size()));
                }
                
                // Intentar desde cada sede
                for (String sede : sedes) {
                    RutaCompleta ruta = planificador.planificarRutaTemporal(pedido, sede);
                    
                    if (ruta != null && ruta.esViable()) {
                        exitosos++;
                        encontroRuta = true;
                        
                        // Clasificar tipo de ruta
                        if (ruta.getTipoRuta().equals("DIRECTO")) {
                            directos++;
                            System.out.printf("‚úÖ Pedido %s: %s ‚Üí %s (DIRECTO)\n", 
                                            pedido.getId(), sede, pedido.getAeropuertoDestinoId());
                        } else {
                            conEscalas++;
                            System.out.printf("üîÑ Pedido %s: %s ‚Üí %s (CON ESCALAS: %s)\n", 
                                            pedido.getId(), sede, pedido.getAeropuertoDestinoId(),
                                            String.join("‚Üí", ruta.getEscalas()));
                        }
                        
                        // Validar plazo (aproximaci√≥n) - manejar horas v√°lidas
                        int horaLlegada = Math.min(pedido.getHora() + 2, 23); // M√°ximo 23:59
                        boolean cumplePlazo = GestorUTCyContinentesCSV.validarPlazoRuta(
                            sede, pedido.getAeropuertoDestinoId(),
                            java.time.LocalTime.of(pedido.getHora(), pedido.getMinuto()),
                            pedido.getDia(),
                            java.time.LocalTime.of(horaLlegada, pedido.getMinuto()),
                            pedido.getDia() + 1
                        );
                        
                        if (!cumplePlazo) {
                            fallidosPorPlazo++;
                            System.out.println("   ‚ö†Ô∏è  ADVERTENCIA: Ruta excede plazo continental/intercontinental");
                        }
                        
                        break; // Encontr√≥ ruta desde esta sede
                    }
                }
                
                if (!encontroRuta) {
                    fallidosSinRuta++;
                    System.out.printf("‚ùå Pedido %s: SIN RUTA VIABLE (destino: %s)\n", 
                                    pedido.getId(), pedido.getAeropuertoDestinoId());
                }
            }
            
            // üìä Resumen final detallado
            System.out.println("\nüìä ================ RESUMEN FINAL CORREGIDO ================");
            System.out.printf("üì¶ Pedidos procesados: %d\n", procesados);
            System.out.printf("‚úÖ Pedidos exitosos: %d (%.1f%%)\n", exitosos, (exitosos * 100.0 / procesados));
            System.out.printf("‚ùå Pedidos fallidos: %d (%.1f%%)\n", fallidosSinRuta, (fallidosSinRuta * 100.0 / procesados));
            System.out.printf("‚úàÔ∏è Rutas directas: %d (%.1f%% del total exitoso)\n", directos, exitosos > 0 ? (directos * 100.0 / exitosos) : 0);
            System.out.printf("üîÑ Rutas con escalas: %d (%.1f%% del total exitoso)\n", conEscalas, exitosos > 0 ? (conEscalas * 100.0 / exitosos) : 0);
            System.out.printf("‚ö†Ô∏è Advertencias por plazo: %d\n", fallidosPorPlazo);
            
            // Eficiencia del sistema
            System.out.println("\nüìà EFICIENCIA DEL SISTEMA CORREGIDO:");
            double eficiencia = (exitosos * 100.0 / procesados);
            if (eficiencia >= 90) {
                System.out.printf("   üü¢ EXCELENTE: %.1f%% de √©xito\n", eficiencia);
            } else if (eficiencia >= 70) {
                System.out.printf("   üü° BUENO: %.1f%% de √©xito\n", eficiencia);
            } else if (eficiencia >= 40) {
                System.out.printf("   üü† MODERADO: %.1f%% de √©xito\n", eficiencia);
            } else {
                System.out.printf("   üî¥ MEJORABLE: %.1f%% de √©xito\n", eficiencia);
            }
            
            System.out.println("\n‚úÖ ================== CORRECCIONES APLICADAS ==================");
            System.out.println("üîß 1. Vuelos cargados desde vuelos_completos.csv (vuelos reales)");
            System.out.println("üîß 2. Pedidos filtrados por destinos v√°lidos en aeropuertos_simple.csv");
            System.out.println("üîß 3. Gestor UTC actualizado con husos exactos del CSV");
            System.out.println("üîß 4. Validaci√≥n completa de aeropuertos en vuelos y pedidos");
            
            System.out.println("\n‚úÖ =================== PROCESO COMPLETADO ===================");
            System.out.printf("üéØ Sistema proces√≥ %d pedidos v√°lidos con √©xito del %.1f%%\n", procesados, eficiencia);
            System.out.println("===============================================================");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en el sistema: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Crea el conjunto de aeropuertos v√°lidos seg√∫n aeropuertos_simple.csv
     */
    private static Set<String> crearAeropuertosValidos() {
        Set<String> aeropuertos = new HashSet<>();
        
        // SUDAM√âRICA (SAM)
        aeropuertos.add("SKBO"); // Bogot√°, Colombia
        aeropuertos.add("SEQM"); // Quito, Ecuador
        aeropuertos.add("SVMI"); // Caracas, Venezuela
        aeropuertos.add("SBBR"); // Brasilia, Brasil
        aeropuertos.add("SPIM"); // Lima, Per√∫ (sede)
        aeropuertos.add("SLLP"); // La Paz, Bolivia
        aeropuertos.add("SCEL"); // Santiago de Chile, Chile
        aeropuertos.add("SABE"); // Buenos Aires, Argentina
        aeropuertos.add("SGAS"); // Asunci√≥n, Paraguay
        aeropuertos.add("SUAA"); // Montevideo, Uruguay
        
        // EUROPA (EUR)
        aeropuertos.add("LATI"); // Tirana, Albania
        aeropuertos.add("EDDI"); // Berl√≠n, Alemania
        aeropuertos.add("LOWW"); // Viena, Austria
        aeropuertos.add("EBCI"); // Bruselas, B√©lgica (sede)
        aeropuertos.add("UMMS"); // Minsk, Bielorrusia
        aeropuertos.add("LBSF"); // Sof√≠a, Bulgaria
        aeropuertos.add("LKPR"); // Praga, Rep√∫blica Checa
        aeropuertos.add("LDZA"); // Zagreb, Croacia
        aeropuertos.add("EKCH"); // Copenhague, Dinamarca
        aeropuertos.add("EHAM"); // √Åmsterdam, Holanda
        
        // ASIA (ASI)
        aeropuertos.add("VIDP"); // Delhi, India
        aeropuertos.add("OSDI"); // Damasco, Siria
        aeropuertos.add("OERK"); // Riad, Arabia Saudita
        aeropuertos.add("OMDB"); // Dubai, Emiratos A.U.
        aeropuertos.add("OAKB"); // Kabul, Afganist√°n
        aeropuertos.add("OOMS"); // Mascate, Om√°n
        aeropuertos.add("OYSN"); // Sana, Yemen
        aeropuertos.add("OPKC"); // Karachi, Pakist√°n
        aeropuertos.add("UBBB"); // Baku, Azerbaiy√°n (sede)
        aeropuertos.add("OJAI"); // Am√°n, Jordania
        
        return aeropuertos;
    }
}
